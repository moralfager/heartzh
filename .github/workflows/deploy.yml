name: Deploy to Production

on:
  push:
    branches:
      - prod
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: "mysql://placeholder:placeholder@localhost:3306/placeholder"
      
      - name: Run tests
        run: npm test || echo "No tests configured"
      
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            set -e
            echo "üöÄ Starting deployment..."
            
            cd ${{ secrets.SERVER_PATH }}
            
            # Pull latest code
            echo "üì• Pulling latest code..."
            git pull origin prod
            
            # Check if .env.production exists
            if [ ! -f .env.production ]; then
              echo "‚ùå ERROR: .env.production not found!"
              echo "üìã Create it from env.production.template"
              exit 1
            fi
            
            # Install dependencies
            echo "üì¶ Installing dependencies..."
            npm install --production
            
            # Stop and remove old containers
            echo "üõë Stopping old containers..."
            docker-compose -f docker-compose.prod.yml down
            
            # Build and start new containers
            echo "üê≥ Building and starting containers..."
            docker-compose -f docker-compose.prod.yml up -d --build
            
            # Wait for services to be healthy
            echo "‚è≥ Waiting for services to start..."
            sleep 30
            
            # Check health
            echo "üè• Checking service health..."
            docker-compose -f docker-compose.prod.yml ps
            
            # Test application
            echo "üîç Testing application..."
            curl -f http://localhost:3000/api/health || {
              echo "‚ùå Health check failed!"
              docker-compose -f docker-compose.prod.yml logs --tail=50
              exit 1
            }
            
            echo "‚úÖ Deployment successful!"
            echo "üåê Application: https://heartofzha.ru"
      
      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed! Check logs above."
