// Prisma schema for Psychology Love Test
// Milestone 1: Database and Privacy

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// TESTS AND STRUCTURE
// ============================================================================

model Test {
  id          String     @id @default(cuid())
  slug        String     @unique
  title       String     @db.VarChar(255)
  description String?    @db.Text
  version     Int        @default(1)
  published   Boolean    @default(false)
  rating      Float      @default(4.8) @db.Float
  resultMode  String     @default("engine") @db.VarChar(20) @map("result_mode") // "engine" or "default"
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  
  questions      Question[]
  scales         Scale[]
  rules          Rule[]
  results        Result[]
  defaultResult  DefaultResult?
  
  @@unique([slug, version])
  @@index([slug])
  @@index([published])
  @@map("tests")
}

model Question {
  id       String   @id @default(cuid())
  testId   String   @map("test_id")
  order    Int
  text     String   @db.Text
  type     String   @db.VarChar(50) // single | multi | scale | likert
  
  test     Test           @relation(fields: [testId], references: [id], onDelete: Cascade)
  options  AnswerOption[]
  
  @@index([testId, order])
  @@map("questions")
}

model AnswerOption {
  id         String   @id @default(cuid())
  questionId String   @map("question_id")
  text       String   @db.Text
  value      Int
  weights    Json?    // {[scaleId]: weight}
  
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  @@index([questionId])
  @@map("answer_options")
}

model Scale {
  id      String  @id @default(cuid())
  testId  String  @map("test_id")
  key     String  @db.VarChar(50) // O, C, E, A, N для Big5
  name    String  @db.VarChar(255)
  min     Int
  max     Int
  bands   Json?   // [{to: number, label: string}]
  
  test    Test    @relation(fields: [testId], references: [id], onDelete: Cascade)
  
  @@unique([testId, key])
  @@index([testId])
  @@map("scales")
}

model Rule {
  id       String  @id @default(cuid())
  testId   String  @map("test_id")
  kind     String  @db.VarChar(50) // threshold | combo | formula
  priority Int     @default(100) // для порядка выполнения правил
  payload  Json    // DSL правил
  
  test     Test    @relation(fields: [testId], references: [id], onDelete: Cascade)
  
  @@index([testId])
  @@index([testId, priority])
  @@map("rules")
}

// ============================================================================
// SESSIONS AND RESULTS (Privacy-focused, TTL 24h)
// ============================================================================

model Session {
  id        String   @id @default(cuid()) // sessionId из cookie
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")
  
  results   Result[]
  
  @@index([expiresAt])
  @@map("sessions")
}

model Result {
  id        String   @id @default(cuid())
  testId    String   @map("test_id")
  sessionId String   @map("session_id")
  version   Int      // версия теста на момент прохождения
  summary   Json     // агрегаты по шкалам, финальные ярлыки
  createdAt DateTime @default(now()) @map("created_at")
  
  session   Session       @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  test      Test          @relation(fields: [testId], references: [id])
  detail    ResultDetail?
  
  @@index([sessionId])
  @@index([testId])
  @@index([createdAt])
  @@map("results")
}

model ResultDetail {
  id       String  @id @default(cuid())
  resultId String  @unique @map("result_id")
  answers  Json    // ответы пользователя на вопросы
  details  Json    // по-вопросные данные, аудит расчёта
  
  result   Result  @relation(fields: [resultId], references: [id], onDelete: Cascade)
  
  @@map("result_details")
}

// ============================================================================
// DEFAULT RESULT (Fallback when no scales/rules)
// ============================================================================

model DefaultResult {
  id              String   @id @default(cuid())
  testId          String   @unique @map("test_id")
  summaryType     String   @db.VarChar(255) @map("summary_type")
  summary         String   @db.Text
  recommendations Json     @default("[]") // Array of recommendation strings
  scalesData      Json     @map("scales_data") // JSON with all scale values
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  test            Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  
  @@map("default_results")
}

// ============================================================================
// IMPORT JOBS (Idempotency tracking)
// ============================================================================

model ImportJob {
  id          String   @id @default(cuid())
  externalId  String   @map("external_id") @db.VarChar(255)
  contentHash String   @map("content_hash") @db.VarChar(64)
  appliedAt   DateTime @default(now()) @map("applied_at")
  testId      String?  @map("test_id")
  status      String   @db.VarChar(50) // applied | skipped | failed
  
  @@unique([externalId, contentHash])
  @@index([externalId])
  @@map("import_jobs")
}
